{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","style","backgroundColor","href","title","type","id","class1","class","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","color","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","newTexts","i","length","charAt","substr","navigator","clipboard","writeText","spaces","split","join","Alert","alert","role","word","low","slice","capitalize","txt","defaultProps","App","Mode","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.962711a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props){\r\n    return (<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\" style={{backgroundColor:props.mode==='light'?'white':'black'}}>\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.class1}</a>\r\n          </li>\r\n          \r\n          <li className=\"nav-item\">\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"form-check form-switch\">\r\n      <input type=\"checkbox\" class=\"form-check-input\"  onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n      <label class={`form-check-label ${props.mode==='light'?'text-dark':'text-light'}`} htmlFor=\"customSwitch1\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    class1 :PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"title here\",\r\n    class1: \"home here\"\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    function noWords(){\r\n        if(text.length===0)return 0;\r\n        else if(text[text.length-1]===' ')return text.split(\" \").length-1;\r\n        else return text.split(\" \").length;\r\n    }\r\n    const handleUpCase = ()=>{\r\n        var newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Upper Case\",\"success\")\r\n    }\r\n    const handleLoCase = ()=>{\r\n        var newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lower Case\",\"success\")\r\n    }\r\n    const handleClear = ()=>{\r\n        setText('')\r\n        props.showAlert(\"Text cleared\",\"success\")\r\n    }\r\n    const handleTitleCase = ()=>{\r\n        var newTexts=text;\r\n        for(var i=0;i<newTexts.length;i++){\r\n            if(i===0){\r\n            newTexts = newTexts.charAt(i).toUpperCase()+ newTexts.substr(i+1);\r\n            }\r\n            if(i>1&&(newTexts[i-2]==='.'&&newTexts[i-1]===' ')||(newTexts[i-1]===' '&&newTexts[i]==='i'&&newTexts[i+1]===' ')){\r\n                newTexts=newTexts.substr(0,i)+newTexts.charAt(i).toUpperCase()+newTexts.substr(i+1);\r\n            }\r\n        }\r\n        setText(newTexts)\r\n        props.showAlert(\"Text converted to Title Case\",\"success\")\r\n    }\r\n    const handleOnChange =(event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy =(event)=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard\",\"success\")\r\n    }\r\n    const handleSpaces =()=>{\r\n        let spaces= text.split(/[ ]+/);\r\n        setText(spaces.join(\" \"));\r\n        props.showAlert(\"White spaces handled\",\"success\")\r\n    }\r\n    const [text,setText]=useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style={{backgroundColor:props.mode==='light'?'white':'#343a40',color:props.mode==='light'?'black':'white'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleUpCase}>Convert to Upper Case</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleLoCase}>Convert to Lower Case</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleClear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleTitleCase}>Title Case</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{noWords()} words and {text.length} characters</p>\r\n            <p>Reading time {.008*text.split(\" \").length} m</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length!==0? text:'Enter your text to preview'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const low =word.toLowerCase();\r\n        return low.charAt(0).toUpperCase()+low.slice(1);\r\n\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}: </strong> {props.alert.txt}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert.js';\nimport React, { useState } from 'react'\n\n\n\nfunction App()  {\n  const [Mode,setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n        txt:message,\n        type: type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    },1500)\n  }\n  const toggleMode = ()=>{\n    if(Mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor=\"#042743\";\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n      \n    }\n  }\n  return (\n    <>\n      <Navbar title=\"Textutils\" class1=\"Home\" mode={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <TextForm heading=\"Enter your text to analyze\" mode={Mode} showAlert={showAlert}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}